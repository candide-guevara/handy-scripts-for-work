" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
 
set nocompatible
colorscheme darkblue

set ignorecase
set switchbuf+=useopen,usetab
set complete=.,w,b,u,t
set tags+=.tags

" Indent options and tab width
set autoindent
set tabstop=2
set expandtab
set shiftwidth=2

" Display options: line number, statusline, current command
set number
set laststatus=2
set statusline=%t%h%m%r%y%=%c,\ %l/%L\ \ %P
set showcmd

" Buffer options
set hidden
 
" Source .vimrc on current directory
set secure
"set exrc

""""""""""""""""""""""""""""""""" Mapings """"""""""""""""""""""""""""""""""""""""""""

let mapleader='-'
let maplocalleader='-'
nnoremap <Leader> <Nop>
nnoremap <LocalLeader> <Nop>

nnoremap <Space> <C-D>
nnoremap Y y$
nnoremap gb :bn<CR>

" Do not copy text each time something is deleted
nnoremap cw "_cw
nnoremap dw "_dw
nnoremap D "_D
nnoremap C "_C
nnoremap cc "_cc
nnoremap x "_x
nnoremap r "_r

nnoremap u <C-u>
nnoremap U u
nnoremap <Backspace> i<Backspace><Esc>l

" The q letter just brings troubles
nnoremap Q q
nnoremap q <Nop>

" Normal paste respects indentation
nnoremap p ]p
nnoremap P [P

inoremap <C-a> <Home>
inoremap <C-e> <End>
cnoremap <C-a> <Home>
cnoremap <C-e> <End>

" Fixes problem of losing updates when inserting in block selection
inoremap <C-c> <Esc>

" Enter adds new line except for quickfix and file explorer
augroup my_enter_noremap
  autocmd!
  autocmd Filetype qf,netrw nnoremap <buffer> <CR> <CR>
  autocmd Filetype qf,netrw nnoremap <buffer> <Backspace> <CR>:ccl<CR>
  autocmd Filetype qf,netrw nnoremap <buffer> <Del> <CR>:ccl<CR>:tabe%<CR>
augroup END
nnoremap <CR> o<Esc>

" Somehow on my vim install when I type <Ctrl-Space> it triggers the <Ctrl-@> mapping !
inoremap <C-@> <C-n>
nnoremap <C-@> cw<C-n>

""""""""""""""""""""""""""""""""" Leader Functions """"""""""""""""""""""""""""""""""""

nnoremap <Leader>ex :call My_open_file_explorer_vsplit()<cr>
nnoremap <Leader>ch :call My_display_cheatsheet()<cr>
nnoremap <Leader>fo :call My_format_code_in_buffer()<cr>
nnoremap <Leader>bu :call My_list_and_select_buffer()<cr>
nnoremap <Leader>*  :call My_count_occurence_word_cursor()<cr>
nnoremap <Leader>gf :call My_recurse_goto_file_cursor()<cr>
nnoremap <Leader>tn :call My_tab_open_current_file()<cr>
nnoremap <Leader>ko :call My_toggle_header_impl_files()<cr>
nnoremap <Leader>vi :call My_edit_source_local_vimrc()<cr>

nnoremap <Leader>gr :call My_grep_open_files('')<left><left>
nnoremap <Leader>sn :call My_search_files_by_name('')<left><left>
nnoremap <Leader>sc :call My_search_files_by_content('')<left><left>
nnoremap <Leader>ta :call My_tags_list_quickfix('')<left><left>

cnoremap <Leader>s %s///gi<Home><right><right><right>
cnoremap <Leader>l .s///gi<Home><right><right><right>

""""""""""""""""""""""""""""""""" Cheatsheet     """""""""""""""""""""""""""""""""""""
function! My_display_cheatsheet()
  let l:message=[ '# Cheatsheet',
  \'[Good reference](http://learnvimscriptthehardway.stevelosh.com/)',
  \'',
  \'## Moving around',
  \'* `CTRL_i` | `CTRL_o` : next|previous cursor position',
  \'* `gf` : goto file under cursor (only works if same dir)',
  \'* `{` | `[{` | `(` : begin paragraph|code|sentence block',
  \'* `}` | `]}` | `)` : end paragraph|code|sentence block',
  \'',
  \'## Yanking and selecting',
  \'* `CTRL_r`+`CTRL_w` : in command mode, paste word under cursor',
  \'* `viw` | `vip` | `vi{` | `vi"` : select word|paragraph|code block|quoted word under cursor',
  \'* `aiw` | `aip` | `ai{` | `ai"` : as before bu include {," ...',
  \'',
  \'## Looking for tags',
  \'* `CTRL_]` : jump to tag mathcing word under cursor',
  \'* `g]` : display list of matching tags to word under cursor',
  \'',
  \'## Looking for tags',
  \'* `CTRL_g` | `g CTRL_g` : display filepath|stats for current buffer',
  \'',
  \'## Custom mappings',
  \'' ]

  let l:leader_maps=My_get_key_mappings('^' . g:mapleader . '.')
  let l:leader_maps_md=map(l:leader_maps, { ix, it -> '    ' . it['type'] . ' ' . it['key'] . '   ' . it['value'] })
  belowright new
  call append(0,l:leader_maps_md)
  call append(0,l:message)
  setlocal syntax=markdown
  setlocal nomodifiable
  setlocal nomodified
  normal! gg
endfunction

function! My_get_key_mappings(pattern)
  silent let l:mapping_blob=split(execute('map'), '\n')
  let l:result_map=[]
  for l:line in l:mapping_blob
    let l:tokens=split(l:line)
    let l:map_value=join(l:tokens[3:], ' ')
    let l:single_map={ 'type':l:tokens[0], 'key':l:tokens[1], 'value':l:map_value }
    call add(l:result_map, l:single_map)
  endfor

  call filter(l:result_map, { idx, item -> item['key'] =~? '\v' . a:pattern })
  return l:result_map
endfunction

""""""""""""""""""""""""""""""""" Util functions """""""""""""""""""""""""""""""""""""

function! My_list_open_files()
  let l:file_list={}
  for buf_item in getbufinfo()
    if has_key(buf_item, 'name') && !(buf_item['name'] ==# '')
      let l:file_list[buf_item['name']]=1
    endif
  endfor
  return keys(l:file_list)
endfunction

function! My_get_visual_selection(do_escape)
  let l:result=''
  if visualmode() ==# 'v'
    let l:push_register=@@
    normal! `<v`>y
    let l:result=@@
    let @@=l:push_register
  endif
  if a:do_escape ==? 'escape'
    let l:result=fnameescape( l:result )
  endif
  return l:result
endfunction

function! My_yank_word_cursor(do_escape)
  let l:push_register=@@
  normal! viwy
  let l:word=@@
  let @@=l:push_register
   
  if a:do_escape ==? 'escape'
    let l:word=fnameescape( l:word )
  endif
  return l:word
endfunction

function! My_count_occurence_word_cursor()
  let l:word=My_yank_word_cursor('escape')
  call My_count_word_occurences(l:word)
endfunction
 
function! My_count_word_occurences(word)
  let l:push_cursor=getpos('.')
  let l:command='%s/' . a:word . '//gn'

  silent let l:result=execute(l:command)
  call setpos('.', l:push_cursor)
  echom 'Found ' a:word . ' : ' . l:result
endfunction

function! My_to_escaped_shell_list(in_list)
  return join( map(a:in_list, { key,val -> shellescape(val) }), ' ')
endfunction

function! My_to_escaped_vim_list(in_list)
  return join( map(a:in_list, { key,val -> fnameescape(val) }), ' ')
endfunction

function! My_format_code_in_buffer()
  let l:push_cursor=getpos('.')
  normal! gg=G
  call setpos('.', l:push_cursor)
endfunction

function! My_open_file_explorer_vsplit()
  execute('Vexplore ' . getcwd())
endfunction

function! My_tab_open_current_file()
  execute('tabedit ' . expand('%'))
endfunction

function! My_echo_red(message)
  echohl Error
  echo a:message
  echohl Normal
endfunction

function! My_list_and_select_buffer()
  ls
  let l:bufnum=input('Select buffer by number : ')
  execute('buffer ' . l:bufnum)
endfunction

function! My_edit_source_local_vimrc()
  augroup au_source_local_vimrc
    autocmd!
    autocmd BufLeave vimrc write | source vimrc
  augroup END
  below split vimrc
endfunction

""""""""""""""""""""""""""""""""" Example Functions """""""""""""""""""""""""""""""""""

"function! My_example_range() " :he func-range
"  echom 'pos vim : ' . join(getpos('.'), ',')
"  echom 'len vim : ' . len(getline(line('.')))
"  echom 'line vim: ' . getline(line('.'))
"  echom 'rnge vim: ' . a:firstline . '-' . a:lastline
"endfunction
"
"function! My_example_py3eval()
"  call My_example_range()
"  " py3eval must return a string or number
"  echom 'pos py  : ' . py3eval('repr(vim.current.window.cursor)')
"  echom 'len py  : ' . py3eval('len(vim.current.line)')
"  " it is trap ! cursor line starts from 1, cursor column starts at 0
"  echom 'line py : ' . py3eval('vim.current.buffer[vim.current.window.cursor[0]]')
"  echom 'rnge py : ' . py3eval('repr(vim.current.range)')
"endfunction
"
"python3 << eof
"def py_example_func(line, linenr):
"  print('line arg : %r, linenr arg : %d' % (line, linenr))
"  print('vim module : ', dir(vim))
"  print('tab : %d, win : %d, buf : %s' % (
"    vim.current.tabpage.number,
"    vim.current.tabpage.window.number, # or vim.current.window
"    vim.current.tabpage.window.buffer.name, # or vim.current.buffer
"  ))
"  print('range : [%d,%d], first line : %r' % (
"    vim.current.range.start, vim.current.range.end,
"    vim.current.range[0]
"  ))
"  vim_func = vim.Function('My_example_range')
"  vim_func()
"eof

" it is trap ! :pydo is called once for EACH line by default (however the current line is constant) 
"nnoremap <leader>py :.,.py3do py_example_func(line, linenr)

""""""""""""""""""""""""""""""""" Search functions """"""""""""""""""""""""""""""""""""

function! My_grep_open_files(pattern)
  let l:file_list=My_to_escaped_shell_list( My_list_open_files() )
  let l:command='grep --extended-regexp --ignore-case ''' . a:pattern . ''' ' . l:file_list

  silent! execute(l:command)
  redraw!
  copen 
endfunction

function! My_vimgrep_open_files(pattern)
  let l:file_list=My_to_escaped_vim_list( My_list_open_files() )
  let l:command='noautocmd vimgrep /\c\v' . a:pattern . '/j ' . l:file_list

  execute(l:command)
  copen 
endfunction

function! My_tags_list_quickfix(pattern)
  let l:push_errorformat=&errorformat
  let l:matches=[]
  silent! let l:result_list=taglist(a:pattern)

  for l:match in l:result_list
    if has_key(l:match, 'cmd') && has_key(l:match, 'filename')
      call add(l:matches, l:match['filename'] . l:match['cmd'])
    endif 
  endfor

  let &errorformat='%f/^%s$/'
  cgetexpr l:matches
  let &errorformat=l:push_errorformat
  copen
endfunction

function! My_search_files_by_name(pattern)
  let l:command='find . -iname ''*' . a:pattern . '*'' | head -n 100'
  let l:push_errorformat=&errorformat
  silent! let l:result_list=systemlist(l:command)

  set errorformat=%f
  cgetexpr l:result_list
  let &errorformat=l:push_errorformat
  copen
endfunction

function! My_search_files_by_content(pattern)
  let l:command='grep --recursive --files-with-matches --line-number --binary-files=without-match --extended-regexp --ignore-case ''' . a:pattern . ''' . | head -n 100'
  let l:push_errorformat=&errorformat
  silent! let l:result_list=systemlist(l:command)

  set errorformat=%f
  cgetexpr l:result_list
  let &errorformat=l:push_errorformat
  copen
endfunction

function! My_recurse_goto_file(filename)
  let l:filepath=findfile(a:filename, getcwd() . '/**5')
  if l:filepath !=# ''
    execute('edit ' . l:filepath)
  else
    call My_echo_red( 'Not found : ' . a:filename . ' in ' . getcwd() )
  endif
endfunction

function! My_recurse_goto_file_cursor()
  let l:push_isk=&l:iskeyword
  let &l:iskeyword=&l:isfname
  let l:word=My_yank_word_cursor('escape')
  let &l:iskeyword=l:push_isk

  call My_recurse_goto_file(l:word)
endfunction

""""""""""""""""""""""""""""""""" Plugin options """""""""""""""""""""""""""""""""""""

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax enable
  set hlsearch
endif

" Disable f**king filetype plugins that overwrite my vimrc (http://peox.net/articles/vimconfig.html)
filetype plugin off
filetype indent off

" Disable plugins selectively (http://vi.stackexchange.com/questions/4257/how-do-i-prevent-vim-from-loading-plugins-on-older-configurations)
"let g:loaded_netrwPlugin = "no_thanks"

" Better file explorer : https://shapeshed.com/vim-netrw/
let g:netrw_banner = 0
let g:netrw_liststyle = 3
let g:netrw_browse_split = 4
let g:netrw_winsize = 25

""""""""""""""""""""""""""""""""" Language specific shortcuts """""""""""""""""""""""""

function! My_cpp_add_once_pragma()
  let l:file_ext=expand('%:t:e')
  if line2byte('$') <# 2 && l:file_ext =~? '\vhp?p?$'
    call append(0, ['#pragma once'])
  endif
endfunction

function! My_cpp_add_include_hdr()
  let l:filename=expand('%:t:r')
  let l:file_ext=expand('%:t')

  if line2byte('$') <# 2 && !(l:filename =~? '\v^main$') && !(l:file_ext =~? '\v\.hp?p?$')
    let l:headername=l:filename . '.h'
    if l:file_ext =~? '\v\.cpp$'
      let l:headername=l:filename . '.hpp'
    endif
    call append(0, ['#include <' . l:headername . '>'])
  endif
endfunction

function! My_cpp_add_namespace(ns)
  let l:ns_list=split(a:ns, '::')
  call reverse(l:ns_list)
  let l:ns_lines=[]

  for ns_item in l:ns_list
    call insert(l:ns_lines, 'namespace ' . ns_item . ' {', 0)
    call add   (l:ns_lines, '} //' . ns_item)
  endfor 
  call append(line('.'), l:ns_lines)
endfunction

function! My_toggle_header_impl_files()
  let l:current_file=expand('%:t:r')
  let l:current_ext=expand('%:t:e')

  if l:current_ext ==? 'c'
    let l:new_file=l:current_file . '.h'
  elseif l:current_ext ==? 'cpp'
    let l:new_file=l:current_file . '.hpp'
  elseif l:current_ext ==? 'h'
    let l:new_file=l:current_file . '.c'
  elseif l:current_ext ==? 'hpp'
    let l:new_file=l:current_file . '.cpp'
  endif

  call My_recurse_goto_file(l:new_file)
endfunction


augroup my_lang_spe_cmd
  autocmd!
  autocmd Filetype c,cpp call My_cpp_add_once_pragma()
  autocmd Filetype c,cpp call My_cpp_add_include_hdr()
  autocmd Filetype c,cpp nnoremap <buffer> <LocalLeader>ns :call My_cpp_add_namespace('')<left><left>
  autocmd Filetype make setlocal noexpandtab
augroup END

""""""""""""""""""""""""""""""""" Code Formatting """""""""""""""""""""""""""""""""""""

function! My_set_code_format_prg(file_type)
  if a:file_type ==# 'c' && executable('clang-format') ==# 1
    setlocal equalprg=clang-format
  elseif a:file_type ==# 'python' && executable('yapf') ==# 1
    setlocal equalprg=yapf
  endif
endfunction

augroup my_lang_format
  autocmd!
  autocmd Filetype c,cpp call My_set_code_format_prg('c')
  autocmd Filetype python call My_set_code_format_prg('python')
augroup END

